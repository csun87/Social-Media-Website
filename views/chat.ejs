<!DOCTYPE html>
<html>
<head>
  <title>Login</title>
  <link rel="stylesheet"
  href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style type="text/css">
  body {
    height: 100%;
  }

  html {
      height: 100%;
  }

  .left{
    height: 100%;
    width: 30%;
    background-color:rgb(54, 52, 52);
    height : 100%;
    color : white
  }

  .right{
    height: 100%;
    width: 70%;
    background-color:rgb(61, 58, 58);
    height : 100%;
    color : white;
  }

  
  .card {
    padding-top: 0;  
    height: 87%;
    background-color: rgb(151, 148, 148);
  }

  .form-control {
      background-color: rgb(100, 96, 96);
      color: black;
      border-color: black;
      height:4%;
      max-width: 95%;
  }

  .panel {
    height : 5%;
    background-color: rgb(85, 82, 82);
  }

  .right-bubble {
    padding-left: 2%;
    width : 40%;
    height: 20%;
    background-color: rgb(63, 59, 59);
    color: rgb(232, 235, 235);
    font-size: 120%;
    content: left;
    
  }

  .flex {
    display: flex;
    flex-direction: row;
  }

  .r {
    color: rgb(77, 77, 248);
  }
  #messages { list-style-type: none; margin: 0; padding: 0; }
  #messages > li { padding: 0.5rem 1rem; }

  #messages > li:nth-child(odd) { background: rgb(224, 221, 221) }

</style>

</head>

<body>

  

  <div class="col-lg-6 col-sm-12 left">
    <h3 id = "username">

    </h3>
    <form id="roomForm" action="" class="flex">
      <input id = "inputRoom" autocomplete="off" type="text" class = "form-control" placeholder="Add a new chat room..."> </br> 
      <button type="button" class="btn btn-sm btn-secondary btn-lg">Create</button>
    </form>
    <form id="inviteForm" action="" class="flex">
      <input id = "inviteFormInput" autocomplete="off" type="text" class = "form-control" placeholder="Invite someone to this chat..."> </br> 
      <button type="button" class="btn btn-sm btn-secondary btn-lg">Invite</button>
    </form>
    Chats
    <ul class = "roomList" id = "rooms">

    </ul>
    Chat Invites
    <ul class = "inviteList" id = "invites">

    </ul>
  </div>

  <div id = "chat-right" class="col-lg-6 col-sm-12 right">
    <div class = "panel">
    </div>
    <div class = "card">
        <div class = "card-body">
          <ul class = "mesList" id = "messages">
 
          </ul>

          
            
        </div>
    </div>
    <form id="form" action="" class="flex">
      <input id = "input" autocomplete="off" type="text" class = "form-control" placeholder="Type a message..."> </br> 
      <input type="submit" class="btn btn-sm btn-secondary btn-lg" value="Send" />
    </form>
  </div>



<script src="/socket.io/socket.io.js" type="text/javascript"></script>
<script>
  var socket = io();
  
  //change the socket io stock code
  var messages = document.getElementById('messages');
  var form = document.getElementById('form');
  var input = document.getElementById('input');
  var rooms = document.getElementById('rooms');
  var roomForm = document.getElementById('roomForm');
  var roomFormInput = document.getElementById('inputRoom');
  var inviteForm = document.getElementById('inviteForm');
  var inviteFormInput = document.getElementById('inviteFormInput');
  var invites = document.getElementById('invites');
  var user = document.getElementById('username');
  var messageList = []
  var roomList = []
  var inviteList = []
  var currentRoom

  socket.on('init', function(msg){
    console.log(msg)
    var item = document.createElement('li');
    item.innerHTML = msg
    user.appendChild(item);
  })

  socket.on('chat message', function(msg) {
    console.log(msg)
    var item = document.createElement('li');
    item.textContent = msg.message;
    item.className = "r";
    messages.appendChild(item);
    messageList.push(item)
    console.log(messageList)
    window.scrollTo(0, document.body.scrollHeight);
  });

  socket.on('prev_messages', function(msg) {
    messages.innerHTML = "";
    rooms.innerHTML = "";
    messageList = [];
    roomList = [];
    console.log("Prev")
    console.log(msg)

    if (msg[0] != null) {
      msg[0].Items.forEach(x => {
      var item = document.createElement('li');
      if(x.author.S == msg[1].user) {
        item.className = "r";
      }
      item.textContent = x.message.S;
      messages.appendChild(item);
      messageList.push(item)
      window.scrollTo(0, document.body.scrollHeight);
    })
    }
    

    msg[1].rooms.forEach( x => {
      var item = document.createElement('li');
      item.innerHTML += '<form id="'+ x.S +'_R" action="" class="flex"><input id="roomBtn" type="button" class="flex btn btn-outline-primary" value='+ x.S + ' onclick= changeRoom("' +x.S+ '") /> <input id = "'+x.S+'_RV" class = "form-control" placeholder="Type Leave to leave."></form>'
      console.log(item.innerHTML)
      rooms.appendChild(item);
      roomList.push(x.S);

      var roomId = document.getElementById(x.S+"_R");
      var roomIdVal = document.getElementById(x.S+"_RV");

      roomId.addEventListener('submit', function(e) {
        e.preventDefault();
        
        if(roomIdVal.value) {
            if (roomIdVal.value == "Leave") {
            console.log(x.S)
            //console.log(invIdValue.value)

            var send = {
              message : x.S,
              room : currentRoom
            }
            //socket.emit("sendInvite", send);
            //socket.emit('deleteRoom', send);

            console.log(roomList)
            var index = roomList.indexOf(x.S);
            console.log(index)
            if (index == 0) {
              roomList.shift()
            } else {
              console.log("not pop")
              roomList = roomList.splice(index-1,1);
            }
            
            console.log(roomList)
            roomId.parentNode.removeChild(roomId); 
            var send = {
              message : x.S,
            }
            //socket.emit("deleteRoom", send)
            console.log(send)
            currentRoom = roomList[0];
            console.log(currentRoom)
            //socket.emit("change room", currentRoom);
            //invites.removeChild(invites.childNodes[index])
            //console.log(inviteList.childNodes);

          } 
        }
        
      });

      
    })

    currentRoom = msg[1].currentRoom;
    console.log("Current room is: "+ currentRoom);

    msg[1].invites.forEach(x=> {
      var item = document.createElement('li');
      item.innerHTML += '<form id="'+ x.S +'" action="" class="flex">'+x.S+'<input id = "'+x.S+'_" class = "form-control" placeholder="Yes to accept, No to decline."></form>'
      console.log(item.innerHTML)

      invites.appendChild(item);
      inviteList.push(item);

      var invId = document.getElementById(x.S);
      var invIdValue = document.getElementById(x.S+"_");


      invId.addEventListener('submit', function(e) {
        e.preventDefault();
        

        if(invIdValue.value) {
            if (invIdValue.value == "Yes") {
            console.log(x.S)
            //console.log(invIdValue.value)
            console.log("add room")

            var send = {
              message : x.S,
              room : currentRoom
            }
            //socket.emit("sendInvite", send);
            socket.emit('addRoom', send);
            socket.emit("deleteInvite", send);

            

            var index = inviteList.indexOf(item);
            inviteList.splice(index,1);
            invId.parentNode.removeChild(invId); 
            //invites.removeChild(invites.childNodes[index])
            //console.log(inviteList.childNodes)

          } else {
            console.log("failed room")

            var index = inviteList.indexOf(item);
            inviteList.splice(index,1);
            invId.parentNode.removeChild(invId); 
            //invites.removeChild(invites.childNodes[index])
            //console.log(inviteList.childNodes)

            var send = {
              message : x.S,
              room : currentRoom
            }

            socket.emit("deleteInvite", send);

          }
      }
        
    });

    })


    
  });

  socket.on('refr', function(msg) {
    var newMessage = true;
    console.log(currentRoom)
    msg[0].Items.forEach(x => {

      var item = document.createElement('li');
      if(x.author.S == msg[1].user) {
        item.className = "r";
      }   
      item.textContent = x.message.S;

      for (var i = 0; i < messageList.length; i++) {
        if(messageList[i].textContent == item.textContent && messageList[i].className == item.className) {
          newMessage = false;
        }
      }
      if (newMessage) {
        console.log("new message")
        messages.appendChild(item);
        messageList.push(item);
      }
      newMessage = true;  
    })
    
  });


  form.addEventListener('submit', function(e) {
    console.log("werg")
    e.preventDefault();
    if (input.value) {
      console.log("werb")

      var send = {
        message : input.value,
        room : currentRoom
      }
      socket.emit('test', send);
      input.value = '';
    }
  });

  function changeRoom(e) {
    console.log(e);

    if (e != currentRoom) {
      console.log(e);
      socket.emit("change room", e)
    }

  }

  roomForm.addEventListener('submit', function(e) {
    console.log(inputRoom.value);
    e.preventDefault();
    if (inputRoom.value) {
      console.log("werb")

      var send = {
        message : inputRoom.value,
        room : currentRoom
      }
      socket.emit("sendInvite", send);
      //socket.emit('addRoom', send);
      input.value = '';
    }
  });

  inviteForm.addEventListener('submit', function(e) {
    e.preventDefault();
    if (inviteFormInput.value) {
      console.log(currentRoom)

      var send = {
        message : inviteFormInput.value,
        room : currentRoom
      }
      socket.emit("sendGroupInvite", send);
      //socket.emit('addRoom', send);
      input.value = '';
    }
  });
  

  setInterval(function() {
    //console.log("refresh")
    socket.emit('refresh', currentRoom);
  }, 2000);



  
</script>
		   
</body>
</html>
